
http://comments.gmane.org/gmane.comp.lib.jemalloc/724
https://github.com/jemalloc/jemalloc/commit/2b51a3e9e9bfebf081d25dfa92f3cd89e4a8ed73
https://github.com/jemalloc/jemalloc/commit/a184d3fcdecfaaf694029fb375d023882aea444e

diff -Naurp jemalloc-3.5.0/test/integration/aligned_alloc.c jemalloc-3.5.0.oden/test/integration/aligned_alloc.c
--- jemalloc-3.5.0/test/integration/aligned_alloc.c	2014-01-22 20:11:43.000000000 +0100
+++ jemalloc-3.5.0.oden/test/integration/aligned_alloc.c	2014-02-04 18:09:50.385647680 +0100
@@ -47,10 +47,10 @@ TEST_BEGIN(test_oom_errors)
 
 #if LG_SIZEOF_PTR == 3
 	alignment = UINT64_C(0x4000000000000000);
-	size      = UINT64_C(0x8400000000000001);
+	size      = UINT64_C(0xc000000000000001);
 #else
 	alignment = 0x40000000LU;
-	size      = 0x84000001LU;
+	size      = 0xc0000001LU;
 #endif
 	set_errno(0);
 	p = aligned_alloc(alignment, size);
diff -Naurp jemalloc-3.5.0/test/integration/allocm.c jemalloc-3.5.0.oden/test/integration/allocm.c
--- jemalloc-3.5.0/test/integration/allocm.c	2014-01-22 20:11:43.000000000 +0100
+++ jemalloc-3.5.0.oden/test/integration/allocm.c	2014-02-04 18:09:50.385647680 +0100
@@ -39,28 +39,6 @@ TEST_BEGIN(test_basic)
 }
 TEST_END
 
-TEST_BEGIN(test_alignment_errors)
-{
-	void *p;
-	size_t nsz, rsz, sz, alignment;
-
-#if LG_SIZEOF_PTR == 3
-	alignment = UINT64_C(0x4000000000000000);
-	sz        = UINT64_C(0x8400000000000001);
-#else
-	alignment = 0x40000000LU;
-	sz        = 0x84000001LU;
-#endif
-	nsz = 0;
-	assert_d_eq(nallocm(&nsz, sz, ALLOCM_ALIGN(alignment)), ALLOCM_SUCCESS,
-	    "Unexpected nallocm() error");
-	rsz = 0;
-	assert_d_ne(allocm(&p, &rsz, sz, ALLOCM_ALIGN(alignment)),
-	    ALLOCM_SUCCESS, "Expected error for allocm(&p, %zu, %#x)",
-	    sz, ALLOCM_ALIGN(alignment));
-}
-TEST_END
-
 TEST_BEGIN(test_alignment_and_size)
 {
 	int r;
@@ -126,6 +104,5 @@ main(void)
 
 	return (test(
 	    test_basic,
-	    test_alignment_errors,
 	    test_alignment_and_size));
 }
diff -Naurp jemalloc-3.5.0/test/integration/mallocx.c jemalloc-3.5.0.oden/test/integration/mallocx.c
--- jemalloc-3.5.0/test/integration/mallocx.c	2014-01-22 20:11:43.000000000 +0100
+++ jemalloc-3.5.0.oden/test/integration/mallocx.c	2014-02-04 18:09:50.385647680 +0100
@@ -34,26 +34,6 @@ TEST_BEGIN(test_basic)
 }
 TEST_END
 
-TEST_BEGIN(test_alignment_errors)
-{
-	void *p;
-	size_t nsz, sz, alignment;
-
-#if LG_SIZEOF_PTR == 3
-	alignment = UINT64_C(0x4000000000000000);
-	sz        = UINT64_C(0x8400000000000001);
-#else
-	alignment = 0x40000000LU;
-	sz        = 0x84000001LU;
-#endif
-	nsz = nallocx(sz, MALLOCX_ALIGN(alignment));
-	assert_zu_ne(nsz, 0, "Unexpected nallocx() error");
-	p = mallocx(sz, MALLOCX_ALIGN(alignment));
-	assert_ptr_null(p, "Expected error for mallocx(%zu, %#x)", sz,
-	    MALLOCX_ALIGN(alignment));
-}
-TEST_END
-
 TEST_BEGIN(test_alignment_and_size)
 {
 	size_t nsz, rsz, sz, alignment, total;
@@ -114,6 +94,5 @@ main(void)
 
 	return (test(
 	    test_basic,
-	    test_alignment_errors,
 	    test_alignment_and_size));
 }
diff -Naurp jemalloc-3.5.0/test/integration/posix_memalign.c jemalloc-3.5.0.oden/test/integration/posix_memalign.c
--- jemalloc-3.5.0/test/integration/posix_memalign.c	2014-01-22 20:11:43.000000000 +0100
+++ jemalloc-3.5.0.oden/test/integration/posix_memalign.c	2014-02-04 18:09:50.385647680 +0100
@@ -43,10 +43,10 @@ TEST_BEGIN(test_oom_errors)
 
 #if LG_SIZEOF_PTR == 3
 	alignment = UINT64_C(0x4000000000000000);
-	size      = UINT64_C(0x8400000000000001);
+	size      = UINT64_C(0xc000000000000001);
 #else
 	alignment = 0x40000000LU;
-	size      = 0x84000001LU;
+	size      = 0xc0000001LU;
 #endif
 	assert_d_ne(posix_memalign(&p, alignment, size), 0,
 	    "Expected error for posix_memalign(&p, %zu, %zu)",
diff -Naurp jemalloc-3.5.0/test/unit/prof_accum.c jemalloc-3.5.0.oden/test/unit/prof_accum.c
--- jemalloc-3.5.0/test/unit/prof_accum.c	2014-01-22 20:11:43.000000000 +0100
+++ jemalloc-3.5.0.oden/test/unit/prof_accum.c	2014-02-04 18:09:50.386647680 +0100
@@ -22,10 +22,10 @@ prof_dump_open_intercept(bool propagate_
 }
 
 #define	alloc_n_proto(n)						\
-static void	*alloc_##n(unsigned bits);
+JEMALLOC_NOINLINE static void	*alloc_##n(unsigned bits);
 
 #define	alloc_n_gen(n)							\
-static void *								\
+JEMALLOC_NOINLINE static void *						\
 alloc_##n(unsigned bits)						\
 {									\
 	void *p;							\
diff -Naurp jemalloc-3.5.0/test/unit/stats.c jemalloc-3.5.0.oden/test/unit/stats.c
--- jemalloc-3.5.0/test/unit/stats.c	2014-01-22 20:11:43.000000000 +0100
+++ jemalloc-3.5.0.oden/test/unit/stats.c	2014-02-04 18:09:50.386647680 +0100
@@ -31,21 +31,25 @@ TEST_END
 
 TEST_BEGIN(test_stats_chunks)
 {
-	size_t current, total, high;
-	size_t sz = sizeof(size_t);
+	size_t current, high;
+	uint64_t total;
+	size_t sz;
 	int expected = config_stats ? 0 : ENOENT;
 
+	sz = sizeof(size_t);
 	assert_d_eq(mallctl("stats.chunks.current", &current, &sz, NULL, 0),
 	    expected, "Unexpected mallctl() result");
+	sz = sizeof(uint64_t);
 	assert_d_eq(mallctl("stats.chunks.total", &total, &sz, NULL, 0),
 	    expected, "Unexpected mallctl() result");
+	sz = sizeof(size_t);
 	assert_d_eq(mallctl("stats.chunks.high", &high, &sz, NULL, 0), expected,
 	    "Unexpected mallctl() result");
 
 	if (config_stats) {
 		assert_zu_le(current, high,
 		    "current should be no larger than high");
-		assert_zu_le(high, total,
+		assert_u64_le((uint64_t)high, total,
 		    "high should be no larger than total");
 	}
 }
@@ -247,9 +251,9 @@ TEST_BEGIN(test_stats_arenas_bins)
 {
 	unsigned arena;
 	void *p;
-	size_t sz, allocated;
+	size_t sz, allocated, curruns;
 	uint64_t epoch, nmalloc, ndalloc, nrequests, nfills, nflushes;
-	uint64_t nruns, nreruns, curruns;
+	uint64_t nruns, nreruns;
 	int expected = config_stats ? 0 : ENOENT;
 
 	arena = 0;
@@ -287,6 +291,7 @@ TEST_BEGIN(test_stats_arenas_bins)
 	    NULL, 0), expected, "Unexpected mallctl() result");
 	assert_d_eq(mallctl("stats.arenas.0.bins.0.nreruns", &nreruns, &sz,
 	    NULL, 0), expected, "Unexpected mallctl() result");
+	sz = sizeof(size_t);
 	assert_d_eq(mallctl("stats.arenas.0.bins.0.curruns", &curruns, &sz,
 	    NULL, 0), expected, "Unexpected mallctl() result");
 
@@ -307,7 +312,7 @@ TEST_BEGIN(test_stats_arenas_bins)
 		}
 		assert_u64_gt(nruns, 0,
 		    "At least one run should have been allocated");
-		assert_u64_gt(curruns, 0,
+		assert_zu_gt(curruns, 0,
 		    "At least one run should be currently allocated");
 	}
 
@@ -319,8 +324,8 @@ TEST_BEGIN(test_stats_arenas_lruns)
 {
 	unsigned arena;
 	void *p;
-	uint64_t epoch, nmalloc, ndalloc, nrequests, curruns;
-	size_t sz = sizeof(uint64_t);
+	uint64_t epoch, nmalloc, ndalloc, nrequests;
+	size_t curruns, sz;
 	int expected = config_stats ? 0 : ENOENT;
 
 	arena = 0;
@@ -333,12 +338,14 @@ TEST_BEGIN(test_stats_arenas_lruns)
 	assert_d_eq(mallctl("epoch", NULL, NULL, &epoch, sizeof(epoch)), 0,
 	    "Unexpected mallctl() failure");
 
+	sz = sizeof(uint64_t);
 	assert_d_eq(mallctl("stats.arenas.0.lruns.0.nmalloc", &nmalloc, &sz,
 	    NULL, 0), expected, "Unexpected mallctl() result");
 	assert_d_eq(mallctl("stats.arenas.0.lruns.0.ndalloc", &ndalloc, &sz,
 	    NULL, 0), expected, "Unexpected mallctl() result");
 	assert_d_eq(mallctl("stats.arenas.0.lruns.0.nrequests", &nrequests, &sz,
 	    NULL, 0), expected, "Unexpected mallctl() result");
+	sz = sizeof(size_t);
 	assert_d_eq(mallctl("stats.arenas.0.lruns.0.curruns", &curruns, &sz,
 	    NULL, 0), expected, "Unexpected mallctl() result");
 
